trigger: none

pool:
  name: "windowspool"
  demands:
    - Agent.Name -equals windowsagent

variables:
  - group: 'Terraform-Details'
  # ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
  # ARM_TENANT_ID: $(ARM_TENANT_ID)
  # ARM_CLIENT_ID: $(ARM_CLIENT_ID)
  # ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)


stages:

# Stage 1: Install Terraform Software
- stage: InstallTerraform
  displayName: "Install Terraform"
  jobs:
    - job: InstallTerraform
      displayName: "Install Terraform"
      steps:
        - powershell: |
            # Define the download URL for the latest version of Terraform
            $url = "https://releases.hashicorp.com/terraform/1.9.8/terraform_1.9.8_windows_amd64.zip"

            # Define the download location and unzip directory
            $downloadPath = "C:\terraform.zip"
            $extractPath = "C:\terraform-software"

            # Download the Terraform ZIP file
            Invoke-WebRequest -Uri $url -OutFile $downloadPath

            # Unzip the downloaded file
            Expand-Archive -Path $downloadPath -DestinationPath $extractPath

            # Add Terraform to PATH
            [System.Environment]::SetEnvironmentVariable("PATH", $env:PATH + ";C:\terraform-software", [System.EnvironmentVariableTarget]::Machine)

            # Verify the installation
            terraform --version
          displayName: "Download and Install Terraform"


# Stage 2: Get Terraform Code
- stage: GetTerraformCode
  displayName: "Get Terraform Code"
  jobs:
    - job: GetTerraformCode
      displayName: "Get Terraform Code"
      steps:
        # Checkout the Terraform code from repository
        - checkout: self

        - task: CopyFiles@2
          inputs:
            SourceFolder: 'C:\vsts-agent-win-x64-3.246.0\_work\1\s'
            Contents: '**/*'  # Copy all files in the directory
            TargetFolder: 'C:\terraform-code'


# Stage 3: Run Terraform Init
- stage: RunTerraformCommands
  displayName: "Run Terraform Commands"
  jobs:
    - job: RunTerraformCommands
      displayName: "Run Terraform Commands"
      steps:

        - task: TerraformTaskV4@4
          displayName: "terraform init"
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: 'C:\terraform-code\environment\dev'
            backendServiceArm: 'devops-azure-connection'
            backendAzureRmResourceGroupName: 'rg-terraform'
            backendAzureRmStorageAccountName: 'strgtfbkndtfstate'
            backendAzureRmContainerName: 'terraform-tfstate-container'
            backendAzureRmKey: 'dev.terraform.tfstate'

        - task: TerraformTaskV4@4
          displayName: "terraform validate"
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: 'C:\terraform-code\environment\dev'

        - task: TerraformTaskV4@4
          displayName: "terraform plan"
          inputs:
            provider: 'azurerm'
            command: 'plan'
            commandOptions: '--var-file dev.tfvars'
            workingDirectory: 'C:\terraform-code\environment\dev'
            environmentServiceNameAzureRM: 'devops-azure-connection'

        - task: TerraformTaskV4@4
          displayName: "terraform apply"
          inputs:
            provider: 'azurerm'
            command: 'apply'
            commandOptions: '--auto-approve --var-file dev.tfvars'
            workingDirectory: 'C:\terraform-code\environment\dev'
            environmentServiceNameAzureRM: 'devops-azure-connection'

