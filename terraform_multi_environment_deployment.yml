trigger: none

pool:
  name: "windowspool"
  demands:
    - Agent.Name -equals windowsagent

variables:
  - group: 'Terraform-Details'
  # ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
  # ARM_TENANT_ID: $(ARM_TENANT_ID)
  # ARM_CLIENT_ID: $(ARM_CLIENT_ID)
  # ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)


stages:

# Stage 1: Get Terraform Code
- stage: GetTerraformCode
  displayName: "Get Terraform Code"
  jobs:
    - job: GetTerraformCode
      displayName: "Get Terraform Code"
      steps:
        # Checkout the Terraform code from repository
        - checkout: self

        - task: CopyFiles@2
          inputs:
            SourceFolder: 'C:\vsts-agent-win-x64-3.246.0\_work\1\s'
            Contents: '**/*'  # Copy all files in the directory
            TargetFolder: 'C:\terraform-code'


# Stage 2: Run Terraform Init
- stage: RunTerraformCommands
  displayName: "Run Terraform Commands for Multiple Environments"
  jobs:
    - job: RunTerraformCommands
      displayName: "Run Terraform Commands for Multiple Environments"
      strategy:
        matrix:
          dev:
            environment: 'dev'
            tfvars: 'dev.tfvars'
          test:
            environment: 'test'
            tfvars: 'test.tfvars'
          uat:
            environment: 'uat'
            tfvars: 'uat.tfvars'

      steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'

        - task: TerraformTaskV4@4
          displayName: "terraform init - $(environment)"
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: 'C:\terraform-code\environment\$(environment)'
            backendServiceArm: 'devops-azure-connection'
            backendAzureRmResourceGroupName: 'rg-terraform'
            backendAzureRmStorageAccountName: 'strgtfbkndtfstate'
            backendAzureRmContainerName: 'terraform-tfstate-container'
            backendAzureRmKey: '$(environment).terraform.tfstate'

        - task: TerraformTaskV4@4
          displayName: "terraform validate - $(environment)"
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: 'C:\terraform-code\environment\$(environment)'

        - task: TerraformTaskV4@4
          displayName: "terraform plan - $(environment)"
          inputs:
            provider: 'azurerm'
            command: 'plan'
            commandOptions: '--var-file $(tfvars)'
            workingDirectory: 'C:\terraform-code\environment\$(environment)'
            environmentServiceNameAzureRM: 'devops-azure-connection'

        - task: TerraformTaskV4@4
          displayName: "terraform apply - $(environment)"
          inputs:
            provider: 'azurerm'
            command: 'apply'
            commandOptions: '--auto-approve --var-file $(tfvars)'
            workingDirectory: 'C:\terraform-code\environment\$(environment)'
            environmentServiceNameAzureRM: 'devops-azure-connection'